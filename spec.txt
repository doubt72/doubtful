== Examples:

foo(a):
  b: 1;;
  +(a, b);;

foo(1); # 2

foo(a):
  b: 1;;
  <<("bleargh");
  +(a, b);;

foo(1); # 2 plus some output

# some weirder stuff here:

foo(a)::a;;;

foo(1); # does NOT return 1.  Returns a function that returns 1
$(foo(1)) # 1

foo():(a): a;;;
foo # returns identity function
$(foo, 1) # 1

== Language features:

* everything is a function, the only "variables" are parameters to functions
* functions are scoped and can be declared anywhere, including inside of other
  functions (or even inside a list, etc.)
* as scope is a thing, functions defined inside functions are accessible only
  in that function, or inside function definitions inside that function
* everything is immutable, functions and data structures cannot be redefined.
  Primitive operations on strings and lists (for example) create new strings and
  lists.  Scope, however, allows definitions to be hidden by new definitions
  inside nested scopes.  Parameters can also be hidden.
* primitive types include atoms (nil, true, false), integers (implemented as
  64-bit integers), floats (implemented as 64-bit floats), strings, lists,
  and functions
* type is implied, but some primitive functions require certain types
* no void functions, all functions must have a return value, but nil is valid
* lists are untyped and can contain any other types in any combination
* anonymous functions are possible
* a function can contain any combination of statements, but the return value of
  the last statement is the return value of that function. If the last
  statement is a function definition, the function returns a function as its
  value.
* Exceptions: if the statement in the body returns an exception, the block is
  terminated.  One type of exception is special: the "return" exception which
  terminates the block but causes the block to return the value in the exception
  payload, unlike other exceptions that type is not propagated
* functions are not closures; scope is dynamic at runtime based on calling
  context. Including parameters of calling functions assuming they're not
  hidden?  Not sure.  Uh, might fix that.
* statements are expressions terminated with a semicolon (;), function
  definitions are statements so will be trailed by multiple semicolons,
  including one for both the last statement in the function and the function as
  a whole.
* if any expression is inside of a function call (or list), it does not need
  a terminating semicolon.  That may seem obvious, except in the case of
  definitions: those also do not need the trailing semicolon in that context
  (for instance, when defining anonymous functions).

Things that aren't there:

* still working on an interpreter, not a compiler. Thinking about converting it
  to LLVM code, but may not bother.  It's more a learning experience trying
  things
* no hashes (so far, may still implement them), but one issue there is keys;
  do they get limited to scalar values?  Lists?  What about function
  primitives?  Implementing something with arbitrary key types isn't so
  difficult, relatively speaking
* no optimization of tail recursion, dumb implementation = stack explosion
* everything is literal in strings including newlines, can't escape
  double-quotes
* and many, many, many other advanced language features; again, easy-to-parse,
  easy-to-run toy language here

== reserved characters:

: ; , ( ) " [ ] { } #

== identifiers:
  anything else not whitespace or literal type (e.g., false, int, list),
  includes some weird things right now like "0z_f" or whatever

== primitive functions:

operations:
  +, -, /, *: (int | float, int | float) -> int | float
  +: (string, string) -> string | (list, any) -> list
  %: (int, int) -> int
  &, |: (true | false, true | false) -> true | false
  !: true -> false | false -> true
comparison:
  >: (int | float, int | float) -> true | false
  <: (int | float, int | float) -> true | false
  =: (any, any) -> true | false
    [any dissimilar types will not be considered equal]
string operations:
  substr: (string, int, int) -> string
  strlen: (string) -> int
list operations:
  car: (list) -> any
  cdr: (list) -> list | nil
hash operations (not implemented, hashes not implemented):
  len: (hash) -> int
  keys: (hash) -> list
  get: (hash, any) -> any
  set: (hash, key, value) -> hash
  unset: (hash, key) -> hash
I/O:
  >>: (string) -> nil
  <<: (nil) <- STDIN (...All of it to EOF; might as well keep this simple)
    [not implemented]
lambda:
  $: takes function as first argument, additional arguments passed
control:
  ? (true | false, any, any) -> any
    [being a function, all arguments will get evaluated before being passed, so
     can't be used for recursion directly]
    [? DOES have special behavior with exceptions, however; an exception in the
     first argument will pass through it, but exceptions in the second and third
     arguments will return only when the first argument is true or false,
     respectively]
exceptions
  raise (any) -> exception
    [raises an "error" exception]
  catch (exception | any) -> [string, any, list] | ["ok", any]
    [catches an exception and turns into a list with the exception type string,
     the payload, and a list of strings (the backtrace); returns: ["ok", value]
     where value is the argument when not passed an exception]
  ~ (any) -> exception
    [returns an exception with the given argument that terminates the
     current block, i.e., it's a return/exit; this is a special kind of raise,
     with a "return" instead of "error" exception type]

== possible primitives:

type conversion:
  int: (float | string)
  float: (int | string)
  string: (any)
  list: (string)
  hash: (string)
  bool (any) : nil | false | 0 | 0.0 | {} | [] | "" | "false" -> false
             : all else -> true
floating point math:
  sqrt, sin, cos, tan, asin, acos, atan, etc.

Can everything else be done by composing the above primitives?

== not primitives:

  >=: (use ! and <)
  <=: (use ! and >)
  !=: (use ! and =)
  ^: (use | and & and !)
  pow: (use * and tail recursion)
  sub: (for lists, use car and cdr)
  len: (list) -> int
  @: (list, fn(any)) -> list [map] (use car and cdr)
  . [from,to]: (int, int, fn(int)) -> list []
  e, pi: (defined)

Obviously, this is misguided purity in practice (i.e., this is slower than it
would be if these were primitives) but doing this because we can.

== types:

atoms:        nil, true, false
int (64):     0
float (64):   0.0
string:       "0"
list:         [0, "0", true]
function:     a raw function definition
exception:    can only be intercepted by catch, terminates a block (including
              the main block -- i.e., the program -- if not caught)

Not implemented:
  hash:         {0: 0, 1: 1}

== syntax:

<block> ::= [ <expression> ]*
<expression> ::= <definition> | <call> | <literal> ';'
<definition> ::= [ <id> ] [ <params> ] ':' <block>
<params> ::= '(' <id> [ ',' <id> ]* ')'
<call> ::= <id> [ '(' <expression-list> ')' ]
<expression-list> ::= [ <expression> [ ',' <expression> ]* ]
<literal> ::= <scalar> | <list> | <hash>
<list> ::= '[' <expression-list> ']'
<hash> ::= '{' <hash-term> [ ',' <hash-term> ]* '}'
<hash-term> ::= <expression> ':' <expression>
<scalar> ::= <atom> | <int> | <float> | <string>
<atom> ::= nil | true | false

Not quite BNF, the tokenizer figures this part out.

<int> is i64
<float> is f64
<string> is double-quote delimited string
<id> is a string that isn't any of the above scalars

TODO:

* Hashes
* Better error handling for parser, keep track of line numbers for errors
* Optimize tail recursion
* Math primitives
* String escape codes
* Refactor and clean shit up (scoping especially is a mess and unnecessarily
  complicated, and evaluation functions are too big and complicated, and
  maybe primitives could be abstracted to something better)

* Build LLVM compiler?
